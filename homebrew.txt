apr, openssl@1.1, apr-util, argon2, aspell, m4, autoconf, brotli, gettext, libunistring, libidn2, libmetalink, libssh2, c-ares, jemalloc, libev, nghttp2, openldap, rtmpdump, zstd, curl, libtool, unixodbc, freetds, libpng, freetype, fontconfig, jpeg, libtiff, webp, gd, libffi, pcre, gdbm, mpdecimal, readline, sqlite, xz, python@3.9, glib, gmp, icu4c, krb5, libpq, libsodium, libzip, oniguruma, pcre2 and tidy-html5
==> Installing shivammathur/php/php@8.1 dependency: apr
==> Pouring apr--1.7.0_2.arm64_big_sur.bottle.tar.gz
==> Caveats
apr is keg-only, which means it was not symlinked into /opt/homebrew,
because Apple's CLT provides apr.

If you need to have apr first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/apr/bin:$PATH"' >> ~/.zshrc

For compilers to find apr you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/apr/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/apr/include"

==> Summary
🍺  /opt/homebrew/Cellar/apr/1.7.0_2: 104 files, 1.4MB
==> Installing shivammathur/php/php@8.1 dependency: openssl@1.1
==> Pouring openssl@1.1--1.1.1k.arm64_big_sur.bottle.tar.gz
==> Regenerating CA certificate bundle from keychain, this may take a while...
==> Caveats
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /opt/homebrew/etc/openssl@1.1/certs

and run
  /opt/homebrew/opt/openssl@1.1/bin/c_rehash

openssl@1.1 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides LibreSSL.

If you need to have openssl@1.1 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openssl@1.1/include"

==> Summary
🍺  /opt/homebrew/Cellar/openssl@1.1/1.1.1k: 8,071 files, 18MB
==> Installing shivammathur/php/php@8.1 dependency: apr-util
==> Pouring apr-util--1.6.1_3.arm64_big_sur.bottle.tar.gz
==> Caveats
apr-util is keg-only, which means it was not symlinked into /opt/homebrew,
because Apple's CLT provides apr (but not apr-util).

If you need to have apr-util first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/apr-util/bin:$PATH"' >> ~/.zshrc

==> Summary
🍺  /opt/homebrew/Cellar/apr-util/1.6.1_3: 54 files, 916.4KB
==> Installing shivammathur/php/php@8.1 dependency: argon2
==> Pouring argon2--20190702_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/argon2/20190702_1: 12 files, 684.7KB
==> Installing shivammathur/php/php@8.1 dependency: aspell
==> Pouring aspell--0.60.8.arm64_big_sur.bottle.1.tar.gz
🍺  /opt/homebrew/Cellar/aspell/0.60.8: 767 files, 322.9MB
==> Installing shivammathur/php/php@8.1 dependency: m4
==> Pouring m4--1.4.18.arm64_big_sur.bottle.1.tar.gz
==> Caveats
m4 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have m4 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/m4/bin:$PATH"' >> ~/.zshrc

==> Summary
🍺  /opt/homebrew/Cellar/m4/1.4.18: 13 files, 658KB
==> Installing shivammathur/php/php@8.1 dependency: autoconf
==> Pouring autoconf--2.71.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/autoconf/2.71: 71 files, 3.2MB
==> Installing shivammathur/php/php@8.1 dependency: brotli
==> Pouring brotli--1.0.9.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/brotli/1.0.9: 25 files, 2.3MB
==> Installing shivammathur/php/php@8.1 dependency: gettext
==> Pouring gettext--0.21.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/gettext/0.21: 1,953 files, 20.8MB
==> Installing shivammathur/php/php@8.1 dependency: libunistring
==> Pouring libunistring--0.9.10.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libunistring/0.9.10: 55 files, 4.4MB
==> Installing shivammathur/php/php@8.1 dependency: libidn2
==> Pouring libidn2--2.3.0.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libidn2/2.3.0: 72 files, 847.3KB
==> Installing shivammathur/php/php@8.1 dependency: libmetalink
==> Pouring libmetalink--0.1.3.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libmetalink/0.1.3: 31 files, 227.6KB
==> Installing shivammathur/php/php@8.1 dependency: libssh2
==> Pouring libssh2--1.9.0_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libssh2/1.9.0_1: 184 files, 997.8KB
==> Installing shivammathur/php/php@8.1 dependency: c-ares
==> Pouring c-ares--1.17.1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/c-ares/1.17.1: 85 files, 693.8KB
==> Installing shivammathur/php/php@8.1 dependency: jemalloc
==> Pouring jemalloc--5.2.1_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/jemalloc/5.2.1_1: 16 files, 2.2MB
==> Installing shivammathur/php/php@8.1 dependency: libev
==> Pouring libev--4.33.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libev/4.33: 12 files, 501.2KB
==> Installing shivammathur/php/php@8.1 dependency: nghttp2
==> Pouring nghttp2--1.43.0.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/nghttp2/1.43.0: 24 files, 2.8MB
==> Installing shivammathur/php/php@8.1 dependency: openldap
==> Pouring openldap--2.4.58.arm64_big_sur.bottle.tar.gz
==> Caveats
openldap is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have openldap first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openldap/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/openldap/sbin:$PATH"' >> ~/.zshrc

For compilers to find openldap you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/openldap/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openldap/include"

==> Summary
🍺  /opt/homebrew/Cellar/openldap/2.4.58: 329 files, 7.5MB
==> Installing shivammathur/php/php@8.1 dependency: rtmpdump
==> Pouring rtmpdump--2.4+20151223_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/rtmpdump/2.4+20151223_1: 20 files, 710.9KB
==> Installing shivammathur/php/php@8.1 dependency: zstd
==> Pouring zstd--1.4.9_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/zstd/1.4.9_1: 31 files, 2.4MB
==> Installing shivammathur/php/php@8.1 dependency: curl
==> Pouring curl--7.76.1.arm64_big_sur.bottle.tar.gz
==> Caveats
curl is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have curl first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/curl/bin:$PATH"' >> ~/.zshrc

For compilers to find curl you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/curl/include"


zsh completions have been installed to:
  /opt/homebrew/opt/curl/share/zsh/site-functions
==> Summary
🍺  /opt/homebrew/Cellar/curl/7.76.1: 484 files, 3.8MB
==> Installing shivammathur/php/php@8.1 dependency: libtool
==> Pouring libtool--2.4.6_3.arm64_big_sur.bottle.tar.gz
==> Caveats
In order to prevent conflicts with Apple's own libtool we have prepended a "g"
so, you have instead: glibtool and glibtoolize.
==> Summary
🍺  /opt/homebrew/Cellar/libtool/2.4.6_3: 71 files, 3.7MB
==> Installing shivammathur/php/php@8.1 dependency: unixodbc
==> Pouring unixodbc--2.3.9_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/unixodbc/2.3.9_1: 46 files, 2.3MB
==> Installing shivammathur/php/php@8.1 dependency: freetds
==> Pouring freetds--1.2.20.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/freetds/1.2.20: 1,259 files, 14.2MB
==> Installing shivammathur/php/php@8.1 dependency: libpng
==> Pouring libpng--1.6.37.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libpng/1.6.37: 27 files, 1.3MB
==> Installing shivammathur/php/php@8.1 dependency: freetype
==> Pouring freetype--2.10.4.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/freetype/2.10.4: 64 files, 2.3MB
==> Installing shivammathur/php/php@8.1 dependency: fontconfig
==> Pouring fontconfig--2.13.1.arm64_big_sur.bottle.tar.gz
==> Regenerating font cache, this may take a while
==> /opt/homebrew/Cellar/fontconfig/2.13.1/bin/fc-cache -frv
🍺  /opt/homebrew/Cellar/fontconfig/2.13.1: 531 files, 3.8MB
==> Installing shivammathur/php/php@8.1 dependency: jpeg
==> Pouring jpeg--9d.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/jpeg/9d: 21 files, 1001.4KB
==> Installing shivammathur/php/php@8.1 dependency: libtiff
==> Pouring libtiff--4.3.0.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libtiff/4.3.0: 249 files, 4.8MB
==> Installing shivammathur/php/php@8.1 dependency: webp
==> Pouring webp--1.2.0.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/webp/1.2.0: 39 files, 2.2MB
==> Installing shivammathur/php/php@8.1 dependency: gd
==> Pouring gd--2.3.2.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/gd/2.3.2: 35 files, 1.6MB
==> Installing shivammathur/php/php@8.1 dependency: libffi
==> Pouring libffi--3.3_3.arm64_big_sur.bottle.tar.gz
==> Caveats
libffi is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

For compilers to find libffi you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/libffi/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/libffi/include"

==> Summary
🍺  /opt/homebrew/Cellar/libffi/3.3_3: 17 files, 617.6KB
==> Installing shivammathur/php/php@8.1 dependency: pcre
==> Pouring pcre--8.44.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/pcre/8.44: 204 files, 4.6MB
==> Installing shivammathur/php/php@8.1 dependency: gdbm
==> Pouring gdbm--1.19.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/gdbm/1.19: 24 files, 880.3KB
==> Installing shivammathur/php/php@8.1 dependency: mpdecimal
==> Pouring mpdecimal--2.5.1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/mpdecimal/2.5.1: 71 files, 2.2MB
==> Installing shivammathur/php/php@8.1 dependency: readline
==> Pouring readline--8.1.arm64_big_sur.bottle.tar.gz
==> Caveats
readline is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides BSD libedit.

For compilers to find readline you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/readline/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/readline/include"

==> Summary
🍺  /opt/homebrew/Cellar/readline/8.1: 48 files, 1.7MB
==> Installing shivammathur/php/php@8.1 dependency: sqlite
==> Pouring sqlite--3.35.4.arm64_big_sur.bottle.tar.gz
==> Caveats
sqlite is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have sqlite first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"' >> ~/.zshrc

For compilers to find sqlite you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/sqlite/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/sqlite/include"

==> Summary
🍺  /opt/homebrew/Cellar/sqlite/3.35.4: 11 files, 4.2MB
==> Installing shivammathur/php/php@8.1 dependency: xz
==> Pouring xz--5.2.5.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/xz/5.2.5: 95 files, 1.4MB
==> Installing shivammathur/php/php@8.1 dependency: python@3.9
==> Pouring python@3.9--3.9.4.arm64_big_sur.bottle.tar.gz
==> /opt/homebrew/Cellar/python@3.9/3.9.4/bin/python3 -m ensurepip
==> /opt/homebrew/Cellar/python@3.9/3.9.4/bin/python3 -m pip install -v --no-deps --no-index --upgrade --isolated --target=/opt/homebrew/lib/python3.9/site-pa
==> Caveats
Python has been installed as
  /opt/homebrew/bin/python3

Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
`python3`, `python3-config`, `pip3` etc., respectively, have been installed into
  /opt/homebrew/opt/python@3.9/libexec/bin

You can install Python packages with
  pip3 install <package>
They will install into the site-package directory
  /opt/homebrew/lib/python3.9/site-packages

tkinter is no longer included with this formula, but it is available separately:
  brew install python-tk@3.9

See: https://docs.brew.sh/Homebrew-and-Python
==> Summary
🍺  /opt/homebrew/Cellar/python@3.9/3.9.4: 3,049 files, 54.9MB
==> Installing shivammathur/php/php@8.1 dependency: glib
==> Pouring glib--2.68.1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/glib/2.68.1: 442 files, 22.0MB
==> Installing shivammathur/php/php@8.1 dependency: gmp
==> Pouring gmp--6.2.1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/gmp/6.2.1: 21 files, 3.3MB
==> Installing shivammathur/php/php@8.1 dependency: icu4c
==> Pouring icu4c--68.2.arm64_big_sur.bottle.tar.gz
==> Caveats
icu4c is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides libicucore.dylib (but nothing else).

If you need to have icu4c first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/icu4c/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/icu4c/sbin:$PATH"' >> ~/.zshrc

For compilers to find icu4c you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/icu4c/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/icu4c/include"

==> Summary
🍺  /opt/homebrew/Cellar/icu4c/68.2: 259 files, 73MB
==> Installing shivammathur/php/php@8.1 dependency: krb5
==> Pouring krb5--1.19.1.arm64_big_sur.bottle.tar.gz
==> Caveats
krb5 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have krb5 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/krb5/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/krb5/sbin:$PATH"' >> ~/.zshrc

For compilers to find krb5 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/krb5/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/krb5/include"

==> Summary
🍺  /opt/homebrew/Cellar/krb5/1.19.1: 162 files, 5.9MB
==> Installing shivammathur/php/php@8.1 dependency: libpq
==> Pouring libpq--13.2.arm64_big_sur.bottle.tar.gz
==> Caveats
libpq is keg-only, which means it was not symlinked into /opt/homebrew,
because conflicts with postgres formula.

If you need to have libpq first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/libpq/bin:$PATH"' >> ~/.zshrc

For compilers to find libpq you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/libpq/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/libpq/include"

==> Summary
🍺  /opt/homebrew/Cellar/libpq/13.2: 2,270 files, 26.9MB
==> Installing shivammathur/php/php@8.1 dependency: libsodium
==> Pouring libsodium--1.0.18_1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libsodium/1.0.18_1: 73 files, 780.9KB
==> Installing shivammathur/php/php@8.1 dependency: libzip
==> Pouring libzip--1.7.3.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/libzip/1.7.3: 142 files, 778.8KB
==> Installing shivammathur/php/php@8.1 dependency: oniguruma
==> Pouring oniguruma--6.9.7.1.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/oniguruma/6.9.7.1: 14 files, 1.4MB
==> Installing shivammathur/php/php@8.1 dependency: pcre2
==> Pouring pcre2--10.36.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/pcre2/10.36: 230 files, 5MB
==> Installing shivammathur/php/php@8.1 dependency: tidy-html5
==> Pouring tidy-html5--5.6.0.arm64_big_sur.bottle.tar.gz
🍺  /opt/homebrew/Cellar/tidy-html5/5.6.0: 14 files, 2.8MB
==> Installing shivammathur/php/php@8.1
==> Pouring php@8.1--8.1.0.arm64_big_sur.bottle.200.tar.gz
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set php_ini /opt/homebrew/etc/php/8.1/php.ini system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set php_dir /opt/homebrew/share/pear@8.1 system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set doc_dir /opt/homebrew/share/pear@8.1/doc system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set ext_dir /opt/homebrew/lib/php/pecl/20201009 system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set bin_dir /opt/homebrew/opt/php@8.1/bin system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set data_dir /opt/homebrew/share/pear@8.1/data system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set cfg_dir /opt/homebrew/share/pear@8.1/cfg system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set www_dir /opt/homebrew/share/pear@8.1/htdocs system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set man_dir /opt/homebrew/share/man system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set test_dir /opt/homebrew/share/pear@8.1/test system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear config-set php_bin /opt/homebrew/opt/php@8.1/bin/php system
==> /opt/homebrew/Cellar/php@8.1/8.1.0/bin/pear update-channels
==> Caveats
To enable PHP in Apache add the following to httpd.conf and restart Apache:
    LoadModule php_module /opt/homebrew/opt/php@8.1/lib/httpd/modules/libphp.so

    <FilesMatch \.php$>
        SetHandler application/x-httpd-php
    </FilesMatch>

Finally, check DirectoryIndex includes index.php
    DirectoryIndex index.php index.html

The php.ini and php-fpm.ini file can be found in:
    /opt/homebrew/etc/php/8.1/

php@8.1 is keg-only, which means it was not symlinked into /opt/homebrew,
because this is an alternate version of another formula.

If you need to have php@8.1 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/php@8.1/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/php@8.1/sbin:$PATH"' >> ~/.zshrc

For compilers to find php@8.1 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/php@8.1/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/php@8.1/include"


To have launchd start shivammathur/php/php@8.1 now and restart at login:
  brew services start shivammathur/php/php@8.1
Or, if you don't want/need a background service you can just run:
  php-fpm
==> Summary
🍺  /opt/homebrew/Cellar/php@8.1/8.1.0: 509 files, 79.4MB
==> Caveats
==> apr
apr is keg-only, which means it was not symlinked into /opt/homebrew,
because Apple's CLT provides apr.

If you need to have apr first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/apr/bin:$PATH"' >> ~/.zshrc

For compilers to find apr you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/apr/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/apr/include"

==> openssl@1.1
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /opt/homebrew/etc/openssl@1.1/certs

and run
  /opt/homebrew/opt/openssl@1.1/bin/c_rehash

openssl@1.1 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides LibreSSL.

If you need to have openssl@1.1 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openssl@1.1/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@1.1 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openssl@1.1/include"

==> apr-util
apr-util is keg-only, which means it was not symlinked into /opt/homebrew,
because Apple's CLT provides apr (but not apr-util).

If you need to have apr-util first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/apr-util/bin:$PATH"' >> ~/.zshrc

==> m4
m4 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have m4 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/m4/bin:$PATH"' >> ~/.zshrc

==> openldap
openldap is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have openldap first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openldap/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/openldap/sbin:$PATH"' >> ~/.zshrc

For compilers to find openldap you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/openldap/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openldap/include"

==> curl
curl is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have curl first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/curl/bin:$PATH"' >> ~/.zshrc

For compilers to find curl you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/curl/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/curl/include"


zsh completions have been installed to:
  /opt/homebrew/opt/curl/share/zsh/site-functions
==> libtool
In order to prevent conflicts with Apple's own libtool we have prepended a "g"
so, you have instead: glibtool and glibtoolize.
==> libffi
libffi is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

For compilers to find libffi you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/libffi/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/libffi/include"

==> readline
readline is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides BSD libedit.

For compilers to find readline you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/readline/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/readline/include"

==> sqlite
sqlite is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have sqlite first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"' >> ~/.zshrc

For compilers to find sqlite you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/sqlite/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/sqlite/include"

==> python@3.9
Python has been installed as
  /opt/homebrew/bin/python3

Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to
`python3`, `python3-config`, `pip3` etc., respectively, have been installed into
  /opt/homebrew/opt/python@3.9/libexec/bin

You can install Python packages with
  pip3 install <package>
They will install into the site-package directory
  /opt/homebrew/lib/python3.9/site-packages

tkinter is no longer included with this formula, but it is available separately:
  brew install python-tk@3.9

See: https://docs.brew.sh/Homebrew-and-Python
==> icu4c
icu4c is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS provides libicucore.dylib (but nothing else).

If you need to have icu4c first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/icu4c/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/icu4c/sbin:$PATH"' >> ~/.zshrc

For compilers to find icu4c you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/icu4c/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/icu4c/include"

==> krb5
krb5 is keg-only, which means it was not symlinked into /opt/homebrew,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have krb5 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/krb5/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/krb5/sbin:$PATH"' >> ~/.zshrc

For compilers to find krb5 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/krb5/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/krb5/include"

==> libpq
libpq is keg-only, which means it was not symlinked into /opt/homebrew,
because conflicts with postgres formula.

If you need to have libpq first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/libpq/bin:$PATH"' >> ~/.zshrc

For compilers to find libpq you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/libpq/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/libpq/include"

==> php@8.1
To enable PHP in Apache add the following to httpd.conf and restart Apache:
    LoadModule php_module /opt/homebrew/opt/php@8.1/lib/httpd/modules/libphp.so

    <FilesMatch \.php$>
        SetHandler application/x-httpd-php
    </FilesMatch>

Finally, check DirectoryIndex includes index.php
    DirectoryIndex index.php index.html

The php.ini and php-fpm.ini file can be found in:
    /opt/homebrew/etc/php/8.1/

php@8.1 is keg-only, which means it was not symlinked into /opt/homebrew,
because this is an alternate version of another formula.

If you need to have php@8.1 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/php@8.1/bin:$PATH"' >> ~/.zshrc
  echo 'export PATH="/opt/homebrew/opt/php@8.1/sbin:$PATH"' >> ~/.zshrc

For compilers to find php@8.1 you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/php@8.1/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/php@8.1/include"


To have launchd start shivammathur/php/php@8.1 now and restart at login:
  brew services start shivammathur/php/php@8.1
Or, if you don't want/need a background service you can just run:
  php-fpm
