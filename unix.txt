find / -type d | grep "directory name" // find directory
sudo systemctl restart nginx //restart nginx
service nginx restart //restart nginx

scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2
scp /dump_06-02-2023_22_48_08.sql root@dev.np.net-performance.online:/home/


rm -dfr <repo_name> # will force remove a directory recursively

php artisan cache:clear
php artisan route:clear
php artisan config:clear
php artisan config:clear --env=testing
php artisan view:clear
php artisan clear-compiled

https://stackoverflow.com/questions/63203144/file-could-not-be-opened-in-append-mode-failed-to-open-stream-permission-denie

// check if queue is running
ps -aux | grep queue

sudo systemctl start php-fpm
sudo systemctl stop php-fpm
sudo systemctl reload php-fpm
sudo systemctl restart php-fpm

sudo service php-fpm start # <- start it
sudo service php-fpm stop # <- stop it
sudo service php-fpm restart # <- restart it
sudo service php-fpm reload # <- reload it


cp -R <path> <path> # copy recursively


chcon -R -t httpd_sys_content_t $SITE_PATH
 // laravel error permission denied
 // fixed my problem with this command in centos 7.6 Server
chcon -R -t httpd_sys_rw_content_t $SITE_PATH

setsebool httpd_can_network_connect_db 1 // permission denied for database in centOs

chcon -Rv --type=httpd_sys_rw_content_t /dir // to make a file of directory readable by php

sudo dpkg-reconfigure tzdata # to change time zone in ubuntu
apt-cache search <name>
apt-cache show <name>

mkdir -p <dir_name/dir_name> // this will create all directories recurcivly

mv docs/** ./ # move Everything from docts directory to current directory

which <Executable> # show path of Executable
type <Executable>

which ls
type cd

locate <name_of_the_file_you_wanna_search_for> # is fast but not up to date (it Indexes all files onece per a day during night)

find <path_you_wanna_search_in> # will search that directory recurcivly
find /user/bin | grep <name>

find -type d # search only for directory
find -type f # search only for files

find -type f -size +1M #search only for files that are more than one MB

find -type f -size +1M -size -100M #search only for files that are more than one MB

find -type f -size +1000M -delete

-samefile #search for files that have the same inode
find . -samefile <file_name>

find . -type f -size +1M -exec <command> {} \; 
find . -type f -size +1M -exec ls -lah {} \; 
find . -type f -size +1M -exec rm -rf {} \; 
# ";" indicates the end of the exec Statement
# "\" to escape semicolon
# {} the result of find will be Substituted in Brackets 

# file systems
#ext4 is the best stable file system for unix
#zfs 
#btrfs
#xfs

diff <file> <file> # show Difference Between two files
diff -c <file> <file> # show Difference Between two files in more readable way 

md5sum * # will envert files Properties to md5 string

# redirect standard output 
cat <file_a> > <file_b> #move the content of "a" to "b" (will Override)
cat <file_a> >> <file_b> #move the content of "a" to "b" (will not Override)

# redirect standard error 
<command> 2> <file_b> #save error messages to file b

<command> > <file_b> 2>&1
# redirect standard output & redirect standard error to file be

#standard input 
<command> <file.txt # use file.txt as an input for the command
-{ wc -w file.txt 
wc -w <file.txt
cat file.txt | wc -w  }- # all of them are the Statement

#"|" redirect standard output into standard input of right command

# grep used to search in strings
grep "some text" file.txt # will search "some text" for in file.txt and highlight it 

grep "regx" inpt

# tar alone is not Compressing only archive
tar -c -v -f <target_name> <input_dir> # combine Everything in input_dir and put it in target_name
tar -cvf <target_name> <input_dir> # f must be at the end of arguments

tar -x -v -f <input_file> <target_path> # extract Everything in input_file and put it in target_path
tar -xvf <input_file> <target_path> # extract Everything in input_file and put it in target_path

# third party Compressing tools used with tar
#gzip -z Fastest, a bit Compressing
#bzip -j Medium, good Compressing
#xz -J slowest, best Compressing

#compres and Archive
zip <target> <input>
unzip <target_file> <path>

#only compres
gzip <target> #will compress and replace the file
gunzip <target> #will extract and replace the file

ls -li #list all files with their enode location of memory
ln <input_file> hardfile.txt # will make a copy of that file but both of them will share the same momory location if u change one it will effect the other one (new file will point to same memory location)
ln -s <input_file> softfile.txt # new file will point to Original file

stat <file> # show you Details about that file including number of links

sudo chown <user> <file> #change the owner
sudo chgrp <group> <file> #change the owner


chmod u-r, g+x, o+r <file>
x=1, w=2, r=4

set user id (chmode u+s <file>)# will execute the file on behalf of the owner
set group id (chmode g+s <file>)# will execute the file on behalf of the group
sticky bit (chmode o+t <file>)# will not let any one delete a folder except the owner 

<command> --help
man <command>
man -k <word>
man -k compress
whatis <command>
man <type> <command> # if there are more than one results in whatis command u can look at each with man

sudo visudo #to make another user use the sudo command

halt, reboot, shut down, power off

systemctl get-default
systemctl set-default <mode> # change default mode (graphical, cmd)
systemctl isolateT

sudo vi /etc/default/grup #permenently change kernal boot options
sudo update-grup 

top (press h to get help)
htop
ps (ps -aux, ps -ef, ps -ef | grep "search string")
kill <pid>

grep ssh * #search for ssh in all files
tail <file> #it shows last 20 lines of a large file 
tail -n <number of lines you want to be showen> <file>
tail -f <file> # will show realtime updates on that file

0,30 #in cronjob run in 0 and 30 minute of each hour

atq # show queued commands
at now + 1 minute <commands>
<commands> | at now + 1 minute 

<command> > /dev/null #only show message when something goes wrong (ignore statndard output but keep standard error)

/var/log/syslog # see log files of the system

apt install | update | upgrade | full-upgrade | search | info | remove 


# figuring out where file come from 

dpkg -S <program> #only search for installed pkg
apt-file search <program> #search for all the available pkg

#fix hard drive
1- unmount that hard drive
2- fsck <drive>

free -h #how much free ram i have
memtester <how much> <iterations>
memtester 6GB | 6200M 2 #will test ram
#memtest86 will test complete ram befor booting the system

[1234, [1..4], $(cat <file>), $(ls)]

for var in 1234 
do 
    <command>
    echo "hi there i'm $var"
done

adduser #a script that will walk you throw the process
useradd <user> -m -G <group> -g <group>
usermod <user> -G <group>, <group>, ... #override groups of a user
usermod <user> -a -G <group>, <group>, ... #append groups of a user
userdel <user> -rf <user>

useradd osama_a -g backend_devs -G programmers -m -N
useradd back_up -m -N
passwd osama_a

sudo chsh -s {/path/to/new/shell} {login_name_here} # change the user's default shell

less /etc/passwd #list all users

groupadd
groumod
groupdel

less /etc/group #list all groups

#this will run when any user login
/etc/environment
/etc/bash.bashrc
/etc/profile

/home/user/.bashrc
/home/user/.profile

/etc/skel #for any new user everything in "skel" folder will be copied to their home directory 

#all services in linux are running as a user
#ulimit => user limit limit users

ulimit -Ha
 
 -H #hard limit
 -S #soft limit

 /etc/security/limits.conf #manage global limits

 /etc/pam.d #change the system auth config

 /etc/network/interfaces #file responsible for network configurations

#systemctl

enabled: will start on boot 
disabled: will not start on boot 

start
stop
restart
status 

/etc/ssh/sshd_config

lsattr #show permissions
chattr +i <file> #prevent from deleting 
chattr +a <file> #you can only append

# synchronize time
# may need to install wget
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"

# change timezone
sudo timedatectl set-timezone Asia/Baghdad

centOS
- mysql conf /etc/my.cnf

cd - # goto previous path


## bash scripting 

# define variable
NAME="osama"

# use variable
echo "hello $NAME"
echo "hello ${NAME}th"

# accept input & store it in variable
read -p "Enter your name" Name
echo "hello $NAME"

echo "Enter your full name:"
ready FNAME LNAME 
echo "hello $NAME ${LNAME}"

# condition 
if [condition]
then 
    # code ...
else 
    # code ...
fi

# it should have space
if ["$NAME" = "osama"]
then 
    echo "welcome dear${NAME}"
fi

# use test in if Statement
if [ -d /var/www ]
then 
    echo "TRUE"
else 
    echo "FALSE"
fi

# loop 

for VAR in $(); do # $() is a list
    # code ...
done

for VAR in $(cat myfile.txt); do
    echo "line: $VAR"
done


for VAR in $(seq 1 10); do
    echo "line: $VAR"
done

# substring

echo osama | cut -c2-4 # cut from character 2 to character 4

## functions
# define 
function foo(){}
foo(){}

# call
foo

# positional paramerter
$ ./example.sh foo bar
# inside bash file $0="./example.sh", $1="foo", $2="bar"



curl

curl <url> -X <method> -d '<payload>' -H '<header>'
 
curl <url> -X <method> -d @< path-of-file> -H '<header>'

du -sh <path> // how much disk it took (size)
df -h

usermod --lock --expiredate 1970-01-02 <username> // block (loack) user
usermod --unlock --expiredate '' <username> // unblock (unloack)

sudo ss -tupln # check the open ports

rsync <options> <source> <destination> // copy file betweeb servers
rsync -avzh /home/osama user@ip:/path/to

# [supervisor]

https://stackoverflow.com/questions/45224707/install-and-configure-supervisord-on-centos-7-to-run-laravel-queues-permanently

supervisorctl help

    # name the task 
    [program:laravel-worker]

    # define the command
    command=php artisan queue:work

    # set a working Directory
    directory=/usr/share/nginx/azimuth/

    autostart=true // also [autostart=yes]
    autorestart=true // also [autorestart=yes]

    # how many time it should try to start it befor concireding it as failed
    startretries=3

    # send standard error logs here
    stderr_logfile=/path/to/the/log/file
    
    # send standard output logs here
    stdout_logfile=/path/to/the/log/file

    # run the command as mentioned use in not mentioned it will run it as a root
    user=nginx

    # set environment variables
    environment=KEY_1='value_1',KEY_2='value_2'

    # You can check if a process listens on a TCP or UDP port with 
    netstat -tuplen

# close a port
firewall-cmd --zone=public --remove-port=6000/tcp
firewall-cmd --runtime-to-permanent 
firewall-cmd --reload

# open port 
firewall-cmd --zone=public --add-port=6001/tcp --permanent
firewall-cmd --reload

uname #show system info
free #show memory RAM usage 
ps # current running process
id # cureent user id
ctrl + R # search in history commands


# configure IPs Centos 7 

/etc/sysconfig/network-scripts/ifcfg-ens224

HWADDR=00:0C:29:7D:AB:4D
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
IPADDR=192.168.43.227
PREFIX=29
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=ens224
UUID=e2b33879-6a2f-3db1-8e09-956367b523cd
ONBOOT=yes
AUTOCONNECT_PRIORITY=-999
DNS1=8.8.8.8
ZONE=public

[configure-static-ip-centos]
    # nmtui
    # systemctl status NetworkManager.service
    or
    # nmcli -o

    /etc/sysconfig/network-scripts/ifcfg-ens192

    TYPE=Ethernet
    PROXY_METHOD=none
    BROWSER_ONLY=no
    BOOTPROTO=none
    DEFROUTE=yes
    IPV4_FAILURE_FATAL=no
    IPV6INIT=yes
    IPV6_AUTOCONF=yes
    IPV6_DEFROUTE=yes
    IPV6_FAILURE_FATAL=no
    IPV6_ADDR_GEN_MODE=stable-privacy
    NAME=ens192
    UUID=b3d1cb4a-e103-4359-9198-7390b6ee0f2b
    DEVICE=ens192
    ONBOOT=yes
    IPADDR=95.170.206.130
    PREFIX=29
    GATEWAY=95.170.206.129
    DNS1=8.8.8.8
    IPV6_PRIVACY=no

    ip route list
    ip route add 192.168.0.0/16 via 192.168.43.225 dev ens224 proto static metric 1

env # to show environment variables of the system
type
whereis # path of the program
export VAR=<value> # define a variable in the terminal and add it to the env
export VAR=$VAR:<value> # append to a variable in the terminal and add it to the env
echo $? # show exit code of the previous command
ls -lah --block-size=M name* # list any thing start with "name" it's a regular expresion

hexdump <file> # display file contents in ascii, decimal, hexadecimal, or octal
strings <file> # For each file given, GNU strings prints the printable character sequences that are at least 4 characters long

command_1 && command_2 # if command_1 executed succcessfully then run command_2
command_1 ; command_2 # run command_1 then run command_2

ss -naptul # show application used ports

[SSL]
you can only get a cirtificate from [let's encrpt] 
certbot certonly --standalone --preferred-challenges http -d erbil-center.org

certbot certonly --manual --preferred-challenges dns
dig -t txt +short _acme-challenge.net-performance.online
openssl x509 -in /etc/letsencrypt/live/p.erbil-center.org/fullchain.pem

# dev subdomains
certbot certonly --webroot -w /usr/share/nginx --preferred-challenges http -d dev.np.net-performance.online,000.net-performance.online,dev.az.net-performance.online,dev.bc.net-performance.online,dev.co.net-performance.online,dev.mn.net-performance.online,dev.md.net-performance.online,dev.mt.bc.net-performance.online,dev.mt.net-performance.online,dev.rc.net-performance.online,p.net-performance.online

# Prod subdomains
certbot certonly --webroot -w /usr/share/nginx --preferred-challenges http -d net-performance.online,mt.net-performance.online,mt.bc.net-performance.online,mn.net-performance.online,co.net-performance.online,bc.net-performance.online,az.net-performance.online,np.net-performance.online,rc.net-performance.online,l.net-performance.online
certbot certonly --webroot -w /usr/share/nginx --preferred-challenges http -d l.net-performance.online

[center]
certbot certonly --standalone --non-interactive --preferred-challenges http --email osama_akre@icloud.com --agree-tos -d erbil-center.org,p.erbil-center.org,s.erbil-center.org

[activate-centos-8]
timedatectl
timedatectl set-timezone "Asia/Baghdad"
dnf clean all
rm -rf /var/cache/dnf
cd /etc/yum.repos.d/
sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
dnf update

[ubuntu-setup]
-----file------- /etc/netplan/00-installer-config.yaml
network:
version: 2
renderer: networkd
ethernets:
    ens160:
    addresses:
    - 192.168.94.53/24
    routes:
        - to: 192.168.0.0/16
            via: 192.168.94.1
            metric: 100
    nameservers:
        addresses:
        - 8.8.8.8
        search: []
    ens192:
    addresses:
    - 130.193.166.66/30
    routes:
        - to: default
            via: 130.193.166.65
    nameservers:
        addresses:
        - 8.8.8.8
        search: []
---------------
netplan apply

[close-laptop-lid]
    nano /etc/systemd/logind.conf
        HandleLidSwitch=ignore
        HandleLidSwitchDocked=ignore
    systemctl restart systemd-logind.service

    nano /etc/default/grub
        GRUB_CMDLINE_LINUX="consoleblank=300"
    update-grub


[teleport]
    # add user 
    tctl users add osama --roles=editor
    # add node 
    tctl tokens add --type=node

[self-signed-certificate]
    # Debian
    sudo apt-get install -y ca-certificates
    sudo cp fib.dc.crt /usr/local/share/ca-certificates
    sudo update-ca-certificates

    # RedHat
    sudo cp fib.dc.crt /etc/pki/ca-trust/source/anchors/
    sudo update-ca-trust

ping <ip> -c 2 > < file>
cat <file> | grep "64 bytes" | cut -d " " -f 4 | tr -d ":" # take lines that contains "64 bytes" and split the line by " " and take the fourth item and translate(remove) ":"

[bash-file]
    for ip in `seq 1 254`; do
    ping -c 1 $1.$ip | grep "64 bytes" | cut -d " " -f 4 | tr -d ":" &
    done
& => do it in parallel