eloquent:{{

$query->get()->each(function($item){
    // do something
});

$query->each()->delete();

$query->get()->each()->delete();

User::whereIn('col_name', $array);

public function setBodyAttribute($body)
{ // make mentioned user links to their profiles
    $this->attributes['body'] = perg_replace('/@([^\s\.]+)/', '<a href="/profiles/$1">$0</a>', $str);
      $this->attributes['body'] = perg_replace('/@([\w\-]+)/', '<a href="/profiles/$1">$0</a>', $str);
}

static::globalScope('replyCount', function($builder) {
    $builder->withCount('replies');
});

$thread->refresh()->replies_count
$thread->fresh()->replies_count // if you made a model then you update it updates are not applied to that variable because a copy of that model is stored, but if you call fresh on it it will apply those updates

$this->assertCount(1, $variable);
$this->assertEqual(1, $variable);
$this->assertException(\Exception::class);

$table->unique(['user_id', 'thread_id']); // means combination of those two must be unique

$query->where('id', 0)->exists(); // this will return a boolean

$model->relation()->find(Primary_key)

public function setUp() // in the test class will get call at the beginning of each method
{
    parent::setUp();

    $this->signIn();
}

App\User::first()->notify(new NotificationClass); // send notification for a user

Uuid::uuid4()->toString();

tap(auth()->user(), function ($user) { // it passes that variable into the function
    // use the $user value here
});

$var = tap(Model::first())->someAction(); // will return first item in that model

Notification::fake();
Notification::assertSentTo(auth->user(), NotificationClass::class)

$key = sprintf("users.%s.visits.%s", auth()->id(), $thread->id);
cache()->forever($key, Carbon::now()); // record when last time a user visited a specific thread
public function hasUpdatesFor()
{
    $key = sprintf("users.%s.visits.%s", auth()->id(), $thread->id);
    return $this->updated_at > cache(key);
}
str_contains($str, 'sequence of character'); // case sensitive
strpos($str, 'sequence of character') !== false; // not case sensitive
preg_match('/(.)\\1{4,}/', $str); // look if a character repeated 5 times or more frequently

foreach($arrayOfClasses as $class) { // run multi classes
    app($class)->action($param);
}

Route::middleware('throttle:1')->post...; // you can only hit this endpoint 1 time per minute
if(Gate::denies('policyAction', new Model)) {
    // display message
}

in render method:
if($exception instanceof YourCustomException){
    return response('message', statusCode);
}

request()->wantsJson();

protected function failedAuthorization() { // you can override on form request to customize Exception that will be thrown

}

preg_match_all('/\@([^\s\.]+)/', $str, $matches); // fined all mentioned users in a string 
preg_match_all('/\@([\w\-]+)/', $str, $matches); // fined all mentioned users in a string 

Storage::fake('disk_name'); 
UploadedFile::fake()->image('avatar.jpg'); // this will generate an image
Storage::disk('disk_name')->assertExists('avatar.jpg');

request()->file('avatar)->store('folder_name', 'disk_name'); // store uploaded image and return it's new path
request()->file('avatar)->storeAs('folder_name', 'file_name', 'disk_name'); // store uploaded image and return it's new path by specified name

getColNameAttribute(){} // will override the column that is fetched from database

array_map('json_decode', $array); // convert each item of the passed array from json to php array

app()->environment('testing')? // to check the environment if it's production or testing

assertSame($1, $2); // must be exactly same
assertRedirect('/path')->assertSessionHas('flash', 'message'); // assert that session has a specific flash message
assertRedirect('/path')->assertSessionHas('flash'); // assert that session has a message
Mail::fake();
// send an email
Mail::assertSent(Email::class);  // test an email is send

Mail::to($user)->send(new Email($data));

route('osama', ['foo' => 'bar']);
// path?foo=bar

str_limit($str, $limit); // if string length > limit it will truncate and add '...' but you can override it as a third argument
str_slug($str);
is_numeric($char);

md5($str); // encrypt given string 


assertFalse($1);
assertNotNull($1);

str_random($length);
Model::forceCreate();



}}
routing:{{
Route::match([], '', '')

$this->middleware('auth', ['except' => 'index']);
}}

async reloadResources(){ // update index table laravel-nova
if(this.resourceName){
    let filters_backup = _.cloneDeep(this.$store.getters[`${this.resourceName}/filters`]);
    let filters_to_change = _.cloneDeep(filters_backup);
    filters_to_change.push({});
    await this.$store.commit(`${this.resourceName}/storeFilters`,filters_to_change);
    await this.$store.commit(`${this.resourceName}/storeFilters`,filters_backup);
}

use refreshDatabase; // trait for unit testing

$models->map(function ($x) {return $x->id})->join('-');

$model->isDirty()  // the model has been edited

$model->isDirty('col')  // the col in model has been edited

$model->created_at->gt(<date>) // check if the column is greater than

is_null(<var>); // check if the passed variable is null

bugsnag-laravel // bugreport automatically 

// u can use the fork (branch) of a plugin instead of using offitial one described in this link 5:50 min
https://laracasts.com/series/whats-new-in-laravel-8/episodes/11?autoplay=true

//whats new in laravel 7
1 - conponent structure improved 
2 - str::of('<string>')->after('<chars>') // string helper class
3 - custom cast class in models // create custom casts override get and set method
4 - for route model binding u can use '/users/{user}/posts/{post:<col>}'
5 - new http clinet facedes that uses guzzle under the hoods Http::post('<URL>', <data>)->body();

//whats new in laravel 8
1 - laravel installer updated to v4
2 - new model directory
3 - php artisan schema:dump // combine all migrations files to single .sql file
4 - class-based model factory  Model::factory()->count(5)->make() | User::factory()->count(5)->admin()->make() // admin is a method on the factory class that will override the default definition
5 - User::factory()->has(Post::factory->count(5))->create() | User::factory()->hasPosts(5)->count(3)->create() // create a user that have 5 posts
5 - Post::factory()->for(User::factory())->count(3)->create() | Post::factory()->forUser()->count(3)->create() // create a user that have 5 posts
6 - php artisan down --secret"<key>" | --render"<view>" // only how has key can access | render that view thew in mantainance mode
7 - queue event listeners
8 - in the tests $this->travel(7)->days() | $this->travel(-7)->days() // set the testing time as defined
8 - $this->travelBack() // will reset everything
9 - ratelimiter(olny accept 6 request per minute) moved from kernal api middlewares to routeServiceProvider@configureRateLimiting
9 - to put it on any request do (->middleware('throttle:<name_that_specified_in:routeServiceProvider@configureRateLimiting>'))

php artisan clear-compiled 
php artisan optimize:clear
composer dump-autoload
php artisan optimize

https://browsersync.io/

global scope: make every call to a model scoped 
// you can listen to login event with a listener by adding custom listener and adding it in EventServiceProvider.php \Illuminate\Auth\Events\Login::class => [ CustomListener::class ]
// stubs used for overriding default templates 

you can use observer instead of model events (protected static function boot())
App\model::observe(new observeClass()) // in EventServiceProvider.php

public function before(User $user) 
{ // this function in policy will be called before any thing id it returns true no other method will be hit
  // but if it returns false then other methods will be hit
    return true
}

$gate->before(function($user) { // apply global authorization for super administrator
    if($user->isAdmin()) return true;
}) 

./vendor/bin/phpunit // to test

in AppServiceProvider@boot
view()->share(<var_name>, <value>); // this variable will be accessible in all views

Event::listen(<name>, function(){});
Event::fire(<name>);

srt::studly(<str>); // remove spaces 

$this->output->progressStart(); // add progress-bar for command
$this->output->progressAdvance(); // add progress-bar for command
$this->output->progressFinish(); // add progress-bar for command

composer require laravel/breeze --dev // new version of laravel ui

Model::search($term)->get()

Http::asForm()->post(<url>, <data>)

function($attribute, $val, $fail) { // custom validation rule with closure
    if($val){
        $fail($attribute . ' is required.');
    }
}

// in serviceProvider register method, when it instantiates this class it will put what ever is returned from thos function
$this->app->bind(Class::class, function() {
    return new Class(params...);
})
$this->app->singleton(Class::class, function() {
    return new Class(params...);
})

dispatch(new Class()); // will run the closure in the background
dispatch(function() {}); // will run the closure in the background
dispatch(function() {})->delay(now()->addMinutes(2)); // will run the closure in the background


new Crawler($content) //lop throw the HTML

app(Pipeline::class)
->send($someVar)
->through([Class::class, Class2::class])
->then(fn($outputVar) => $outputVar)

class Class2 {
    public function handle($var, Closure $next)
    {
        // ... logic
        return $next($var)
    }
}

Model::observe(ObserverClass::class);
EventServiceProvider@boot

rm -rf storage/framework/sessions/* // logout all users

Route::get('/posts/{post?}', fn() => null); // optional parameters
Route::get('/posts/{post}', fn() => null)->where('post', '[0-9]+'); // regular expression
Route::get('/posts/{post}/{comment}', fn() => null)->where(['post' => '[0-9]+', 'comment' => 'regx']); // regular expression
# in RouteServiceProvider@boot
Route::pattern('id', '[0-9]+')

// check if queue is running 
ps -aux | grep queue

in middleware you can run the code before or after other middleware

# before 
// action 
return next($request);

# before
$request = next($request);
// action 
return $request;


# trigger a specific class when type hinting it's interface to be replaced easily in future
AppServiceProvider@boot
$this->app->bind('path\to\interface', 'path\to\the\class')

in Controller
$this->middleware(<middleware>);
$this->middleware(<middleware>)->only(<method>);
$this->middleware(<middleware>)->except(<methods>);

# redirecting to a controller
redirect()->action([Class::class, 'method'])
redirect()->away('https://google.com')

ziggy to map Frontend routes to the backend routes
https://github.com/tighten/ziggy

$query->when($boolean, fn($query, $boolean) => $query)

arr->through(fn($item) => $item) // just like .map but it will not return a new array instead it will alter the original one (you can use it to alter the data pf the paginate object)
Model::paginate()->withQueryString() // will preserve the query string for the urls

public function setPasswordAttribute($value)
{
    $this->attributes['password'] = bcrypt($value)
}

public function toArray() // on the model class
{
    return [];
}

$hidden = []; // hide the listed columns when serializing
$visible = []; // only show the listed columns when serializing

ModelResource::make(User::first()); // control what to pass for the Frontend from your model [extends=JsonResource]

Model::query()->with(['relation' => function($query) { $query->select('id', 'name') }])
Model::query()->with('relation:id,name')

[subQuery]
User::query()->addSelect(['last_login_at' => Login::select('created_at')
->whereColumn('user_id', 'users.id')
->latest()
->take(1)])->withCasts(['last_login_at' => 'datetime']) // add the last login of a user with a subQuery when the user id of logins table is equal to id of that user in the parent users table

[dynamic-relationships]
# generating a new column of fly and making a relation with it
class User extends Model {
    public function lastLogin() 
    {
        return $this->belongsTo(Login::class);
    }
    public function scopeWithLastLogin($query)
    {
        $this->addSelect(['last_login_id' => Login::select('id')
        ->latest()
        ->take(1)
        ])->with('lastLogin')
    }
}

[loading]
https://laracasts.com/series/eloquent-performance-patterns/episodes/6
public function show(Feature $feature)
{
    $feature->load('comments.user', 'comments.feature.comments');

    // alternative of the second one 
    $feature->comments->each->setRelation('feature', $feature);
}



