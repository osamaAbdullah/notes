# [layer-7]
# working on layer 7 application layer on http protocal
http {

    server {
        # listen to a port
        listen 80;

        # specifiny root directory
        root /path

        # if the url matches this regx [.php$] => (anything ends with php)
        location ~ .php$ {
            # do something about it
        }

    }

     server {
        listen 8080;

        location /admin {
            # if the url was /admin redirect to mentioned URL
            proxy_pass http://localhost:80/;
        }

    }
}

# [load-balancer] default

http {

    # [load-balancer] will distribute load between listed servers acording to some default algorithms
    upstream backend {
        server 127.0.0.1:8080;
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
        server 127.0.0.1:8083;
        server 127.0.0.1:8084;
        server 127.0.0.1:8085;
    }

    server {
        listen 80;

        # if request comes to port 80 send them to the load balancer [upstream backend]
        location / {
            proxy_pass http://backend/;
        }
    }
}

# [load-balancer] ip_hash

http {

    # [load-balancer] will distribute load between listed servers acording to some ip_hash algorithms
    # [ip_hash algorithms] will send trafic of spesific user(ip) to the same server in the list but for another user(ip) it will send to another server
    upstream backend {
        ip_hash;
        server 127.0.0.1:8080;
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
        server 127.0.0.1:8083;
        server 127.0.0.1:8084;
        server 127.0.0.1:8085;
    }

    server {
        listen 80;

        # if request comes to port 80 send them to the load balancer [upstream backend]
        location / {
            proxy_pass http://backend/;
        }
        
        location /admin {
            return 403;
        }
    }
}

# [layer-4] => faster and more effitiant
stream {
    upstream app {
        server 172.2.3.4;
        server 172.2.3.3;
        server 172.2.3.5;
        server 172.2.3.6;
        server 172.2.3.7;
    }
    server {
        listen 80;
        proxy_pass app;
    }
}

# [SSL]
http {

    server {
        # [http2] use http v2 instead of 1.1
        listen 443 ssl http2;
        root /path;

        ssl_cirtificate /path/to/public/key
        ssl_cirtificate_key /path/to/private/key
        ssl_protocals TLSv1.3
        
        location /admin {
            return 403;
        }
    }
}