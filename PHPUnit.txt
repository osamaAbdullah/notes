extends PHPUnit_Framework_TestCase

$this->markTestSkipped();

// dummy class: copy all methods but they just return null
//  stub class: copy all methods but they will return spefic mentioned value
// mocked class: copy all methods but they will return spefic mentioned value with metioned arguments and expect a function to be called specified times

$class = $this->createMock(<class>::class); // create dummy class exactly like original only for testing 
$class->method(<method>)->willReturn(<output>) // the dummy class metioned method will return the passed value

$class = Mockery::mock(<class>::class); // mock that class
$class->shoulRecive(<method>)->andReturn(<value>); // that method should be called and return that
$class->shoulRecive(<method>-><method>)->andReturn(<value>); // that method should be called and return a mock of it then next function should be calld and return spesified value

$mockedObject->expects($this->once())->method(<method>)->with(<args>); // assert that metioned method of mocked class is called once with given parameters

Http::fake(function() {
	return ['foo' => 'bar']
}); // if you hit any url it will return this as a response

$this->seed(<class>::class);

/*
* @group <group>
*/    to group a test class 

pu --exclude-group api // check all test except that group

assetEqual(<val>, <val>); // not exact match 
assetSame(<val>, <val>); // exact match 


























<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="./vendor/phpunit/phpunit/phpunit.xsd"
         backupGlobals="false"
         backupStaticAttributes="false"
         bootstrap="vendor/autoload.php"
         processIsolation="false"
         stopOnFailure="false"
         colors="true"
>
    <testsuites>
        <testsuite name="Feature">
            <directory suffix="Test.php">./tests/</directory>
        </testsuite>
    </testsuites>
    <filter>
        <whitelist>
            <directory suffix=".php">./app</directory>
        </whitelist>
    </filter>
<!--    <php>-->
<!--        <server name="APP_ENV" value="testing"/>-->
<!--        <server name="BCRYPT_ROUNDS" value="4"/>-->
<!--        <server name="CACHE_DRIVER" value="array"/>-->
<!--        <server name="DB_CONNECTION" value="sqlite"/>-->
<!--        <server name="DB_DATABASE" value=":memory:"/>-->
<!--        <server name="MAIL_MAILER" value="array"/>-->
<!--        <server name="QUEUE_CONNECTION" value="sync"/>-->
<!--        <server name="SESSION_DRIVER" value="array"/>-->
<!--        <server name="TELESCOPE_ENABLED" value="false"/>-->
<!--    </php>-->
</phpunit>